ðŸ”Œ Smart Waste Management System - Circuit Diagram
Component Connections
Arduino UNO/ESP32 Pin Configuration
SENSORS:
â”œâ”€â”€ IR Sensor (Human Detection)
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â””â”€â”€ OUT â†’ Digital Pin 2
â”‚
â”œâ”€â”€ Ultrasonic Sensor HC-SR04 (Fill Level)
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â”œâ”€â”€ Trig â†’ Digital Pin 3
â”‚   â””â”€â”€ Echo â†’ Digital Pin 4
â”‚
â”œâ”€â”€ DHT11 (Temperature & Humidity)
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â””â”€â”€ DATA â†’ Digital Pin 5
â”‚
â”œâ”€â”€ MPU6050 (Accelerometer/Gyroscope)
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â”œâ”€â”€ SCL â†’ A5 (Arduino UNO) / Pin 22 (ESP32)
â”‚   â””â”€â”€ SDA â†’ A4 (Arduino UNO) / Pin 21 (ESP32)
â”‚
â””â”€â”€ Soil Moisture Sensor (Waste Type Detection)
    â”œâ”€â”€ VCC â†’ 5V
    â”œâ”€â”€ GND â†’ GND
    â””â”€â”€ A0 â†’ Analog Pin A0

ACTUATORS:
â”œâ”€â”€ Servo Motor 1 (Lid Control)
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â””â”€â”€ Signal â†’ Digital Pin 12
â”‚
â”œâ”€â”€ Servo Motor 2 (Waste Sorting)
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â””â”€â”€ Signal â†’ Digital Pin 13
â”‚
â””â”€â”€ L298N Motor Driver (Mobility)
    â”œâ”€â”€ VCC â†’ 12V External Supply
    â”œâ”€â”€ GND â†’ GND (Common)
    â”œâ”€â”€ ENA â†’ Analog Pin A1
    â”œâ”€â”€ IN1 â†’ Analog Pin A2
    â”œâ”€â”€ IN2 â†’ Analog Pin A3
    â”œâ”€â”€ IN3 â†’ Analog Pin A4
    â”œâ”€â”€ IN4 â†’ Analog Pin A5
    â””â”€â”€ ENB â†’ Connect to ENA

DISPLAY & INDICATORS:
â”œâ”€â”€ 16x2 LCD with I2C Module
â”‚   â”œâ”€â”€ VCC â†’ 5V
â”‚   â”œâ”€â”€ GND â†’ GND
â”‚   â”œâ”€â”€ SCL â†’ A5 (Share with MPU6050)
â”‚   â””â”€â”€ SDA â†’ A4 (Share with MPU6050)
â”‚
â”œâ”€â”€ LEDs (Status Indicators)
â”‚   â”œâ”€â”€ Green LED â†’ Digital Pin 7 (+ 220Î© resistor)
â”‚   â”œâ”€â”€ Yellow LED â†’ Digital Pin 8 (+ 220Î© resistor)
â”‚   â”œâ”€â”€ Red LED â†’ Digital Pin 9 (+ 220Î© resistor)
â”‚   â”œâ”€â”€ Blue LED â†’ Digital Pin 10 (+ 220Î© resistor)
â”‚   â””â”€â”€ White LED â†’ Digital Pin 11 (+ 220Î© resistor)
â”‚
â””â”€â”€ Buzzer (Active/Passive)
    â”œâ”€â”€ Positive â†’ Digital Pin 6
    â””â”€â”€ Negative â†’ GND
Power Supply Configuration
Option 1: Arduino UNO Setup
Power Distribution:
â”œâ”€â”€ Arduino UNO: USB/DC Jack (7-12V)
â”œâ”€â”€ Sensors (5V): Arduino 5V Pin
â”œâ”€â”€ Servos (5V): Arduino 5V Pin (or external 5V supply for heavy load)
â”œâ”€â”€ Motors: External 12V Supply through L298N
â””â”€â”€ LEDs: Arduino 5V through current limiting resistors
Option 2: ESP32 Setup (Recommended for WiFi)
Power Distribution:
â”œâ”€â”€ ESP32: USB/VIN (5V)
â”œâ”€â”€ Sensors (3.3V/5V): ESP32 3.3V or external 5V
â”œâ”€â”€ Level Shifters: For 5V sensors if using ESP32 3.3V
â”œâ”€â”€ Servos: External 5V supply recommended
â””â”€â”€ Motors: External 12V Supply through L298N
Detailed Wiring Instructions
1. Sensor Connections
IR Sensor (Human Presence Detection)

IR Sensor    â†’    Arduino
VCC          â†’    5V
GND          â†’    GND
OUT          â†’    Digital Pin 2
Ultrasonic Sensor HC-SR04 (Fill Level)

HC-SR04      â†’    Arduino
VCC          â†’    5V
GND          â†’    GND
Trig         â†’    Digital Pin 3
Echo         â†’    Digital Pin 4
DHT11 (Environmental Monitoring)

DHT11        â†’    Arduino
VCC          â†’    5V
GND          â†’    GND
DATA         â†’    Digital Pin 5
MPU6050 (Tampering Detection)

MPU6050      â†’    Arduino UNO    â†’    ESP32
VCC          â†’    5V             â†’    3.3V
GND          â†’    GND            â†’    GND
SCL          â†’    A5             â†’    Pin 22
SDA          â†’    A4             â†’    Pin 21
Soil Moisture Sensor (Waste Classification)

Moisture     â†’    Arduino
VCC          â†’    5V
GND          â†’    GND
A0           â†’    Analog Pin A0
2. Actuator Connections
Servo Motors (Lid & Sorting Mechanism)

Servo 1 (Lid)     â†’    Arduino
Red (VCC)         â†’    5V (or external 5V)
Brown (GND)       â†’    GND
Orange (Signal)   â†’    Digital Pin 12

Servo 2 (Sort)    â†’    Arduino
Red (VCC)         â†’    5V (or external 5V)
Brown (GND)       â†’    GND
Orange (Signal)   â†’    Digital Pin 13
L298N Motor Driver (Mobility)

L298N        â†’    Arduino    â†’    Motors
VCC          â†’    External 12V
GND          â†’    GND (Common Ground)
ENA          â†’    A1         â†’    Motor A Speed Control
IN1          â†’    A2         â†’    Motor A Direction 1
IN2          â†’    A3         â†’    Motor A Direction 2
IN3          â†’    A4         â†’    Motor B Direction 1
IN4          â†’    A5         â†’    Motor B Direction 2
ENB          â†’    Connect to ENA (or separate PWM pin)
OUT1/OUT2    â†’    Left Motor
OUT3/OUT4    â†’    Right Motor
3. Display & Indicator Connections
16x2 LCD with I2C

LCD I2C      â†’    Arduino UNO    â†’    ESP32
VCC          â†’    5V             â†’    5V
GND          â†’    GND            â†’    GND
SCL          â†’    A5             â†’    Pin 22
SDA          â†’    A4             â†’    Pin 21
LED Status Indicators

LED Color    â†’    Arduino Pin    â†’    Function
Green        â†’    Pin 7          â†’    Normal/Low Fill
Yellow       â†’    Pin 8          â†’    Medium Fill
Red          â†’    Pin 9          â†’    Full/Alert
Blue         â†’    Pin 10         â†’    Lid Open
White        â†’    Pin 11         â†’    Wet Waste Detected

Connection: Arduino Pin â†’ 220Î© Resistor â†’ LED (+) â†’ LED (-) â†’ GND
Buzzer (Alert System)

Buzzer       â†’    Arduino
Positive     â†’    Digital Pin 6
Negative     â†’    GND
Circuit Layout Recommendations
Breadboard Layout (Prototype)
Breadboard Sections:
â”œâ”€â”€ Power Rails: 5V, 3.3V, GND distribution
â”œâ”€â”€ Sensor Section: All input sensors
â”œâ”€â”€ Display Section: LCD and LEDs
â”œâ”€â”€ Actuator Section: Servos and buzzer
â””â”€â”€ Communication: I2C devices on same bus
PCB Layout (Final Implementation)
PCB Zones:
â”œâ”€â”€ Power Section: Voltage regulators, filtering capacitors
â”œâ”€â”€ Microcontroller: Arduino/ESP32 with supporting components
â”œâ”€â”€ Sensor Interface: Input conditioning circuits
â”œâ”€â”€ Actuator Drivers: Motor drivers, servo connections
â””â”€â”€ Communication: I2C, UART, WiFi antenna (ESP32)
Safety Considerations


Electrical Safety
Use appropriate current limiting resistors for LEDs
Ensure proper ground connections for all components
Use external power supply for high-current devices (motors, servos)
Add flyback diodes for inductive loads
Implement over-current protection
Mechanical Safety
Secure all connections to prevent disconnection during movement
Use proper gauge wires for current requirements
Implement emergency stop functionality
Ensure servo movements are properly constrained
Component Specifications


Power Requirements
Component         Current Draw    Voltage
Arduino UNO       20-50mA         5V
ESP32             80-260mA        3.3V/5V
HC-SR04           15mA            5V
DHT11             1-1.5mA         5V
MPU6050           3.9mA           5V
IR Sensor         20mA            5V
Moisture Sensor   35mA            5V
SG90 Servo        10-600mA        5V
LCD 16x2          1-5mA           5V
LEDs (each)       20mA            Forward voltage
Buzzer            30mA            5V
BO Motors         100-300mA       6-12V
L298N             36mA            5V (logic)
Total Power Budget
Standby Mode:     ~200mA @ 5V
Active Mode:      ~800mA @ 5V
Peak Mode:        ~1.5A @ 5V + Motor current
Troubleshooting Guide


Common Issues
I2C Communication Errors: Check SCL/SDA connections and pull-up resistors
Servo Jitter: Use external 5V supply, check for power fluctuations
Sensor Reading Errors: Verify power connections and pin assignments
Motor Not Working: Check L298N enable pins and power supply
LCD Not Displaying: Verify I2C address (usually 0x27 or 0x3F)
Testing Procedures
Test each sensor individually
Verify power supply stability under load
Check I2C device addresses using scanner
Test servo movement range and positions
Verify motor direction and speed control
